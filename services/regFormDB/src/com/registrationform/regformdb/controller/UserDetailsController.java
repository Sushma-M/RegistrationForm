/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.registrationform.regformdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.registrationform.regformdb.service.UserDetailsService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.registrationform.regformdb.*;
import com.registrationform.regformdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class UserDetails.
 * @see com.registrationform.regformdb.UserDetails
 */
@RestController(value = "RegFormDB.UserDetailsController")
@RequestMapping("/regFormDB/UserDetails")
@Api(description = "Exposes APIs to work with UserDetails resource.", value = "UserDetailsController")
public class UserDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsController.class);

    @Autowired
    @Qualifier("regFormDB.UserDetailsService")
    private UserDetailsService userDetailsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of UserDetails instances matching the search criteria.")
    public Page<UserDetails> findUserDetailss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserDetailss list");
        return userDetailsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of UserDetails instances.")
    public Page<UserDetails> getUserDetailss(Pageable pageable) {
        LOGGER.debug("Rendering UserDetailss list");
        return userDetailsService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the UserDetails instance associated with the given id.")
    public UserDetails getUserDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserDetails with id: {}", id);
        UserDetails instance = userDetailsService.findById(id);
        LOGGER.debug("UserDetails details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the UserDetails instance associated with the given id.")
    public boolean deleteUserDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserDetails with id: {}", id);
        UserDetails deleted = userDetailsService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the UserDetails instance associated with the given id.")
    public UserDetails editUserDetails(@PathVariable("id") Integer id, @RequestBody UserDetails instance) throws EntityNotFoundException {
        LOGGER.debug("Editing UserDetails with id: {}", instance.getId());
        instance.setId(id);
        instance = userDetailsService.update(instance);
        LOGGER.debug("UserDetails details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new UserDetails instance.")
    public UserDetails createUserDetails(@RequestBody UserDetails instance) {
        LOGGER.debug("Create UserDetails with information: {}", instance);
        instance = userDetailsService.create(instance);
        LOGGER.debug("Created UserDetails with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setUserDetailsService(UserDetailsService service) {
        this.userDetailsService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of UserDetails instances.")
    public Long countAllUserDetailss() {
        LOGGER.debug("counting UserDetailss");
        Long count = userDetailsService.countAll();
        return count;
    }
}
