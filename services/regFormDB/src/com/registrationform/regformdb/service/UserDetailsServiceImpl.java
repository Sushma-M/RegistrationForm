/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.registrationform.regformdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.registrationform.regformdb.*;


/**
 * ServiceImpl object for domain model class UserDetails.
 * @see com.registrationform.regformdb.UserDetails
 */
@Service("regFormDB.UserDetailsService")
public class UserDetailsServiceImpl implements UserDetailsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsServiceImpl.class);

    @Autowired
    @Qualifier("regFormDB.UserDetailsDao")
    private WMGenericDao<UserDetails, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<UserDetails, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "regFormDBTransactionManager")
     public Page<UserDetails> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "regFormDBTransactionManager")
    @Override
    public UserDetails create(UserDetails userdetails) {
        LOGGER.debug("Creating a new userdetails with information: {}" , userdetails);
        return this.wmGenericDao.create(userdetails);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "regFormDBTransactionManager")
    @Override
    public UserDetails delete(Integer userdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting userdetails with id: {}" , userdetailsId);
        UserDetails deleted = this.wmGenericDao.findById(userdetailsId);
        if (deleted == null) {
            LOGGER.debug("No userdetails found with id: {}" , userdetailsId);
            throw new EntityNotFoundException(String.valueOf(userdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "regFormDBTransactionManager")
    @Override
    public Page<UserDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all userdetailss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "regFormDBTransactionManager")
    @Override
    public Page<UserDetails> findAll(Pageable pageable) {
        LOGGER.debug("Finding all userdetailss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "regFormDBTransactionManager")
    @Override
    public UserDetails findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding userdetails by id: {}" , id);
        UserDetails userdetails=this.wmGenericDao.findById(id);
        if(userdetails==null){
            LOGGER.debug("No userdetails found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return userdetails;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "regFormDBTransactionManager")
    @Override
    public UserDetails update(UserDetails updated) throws EntityNotFoundException {
        LOGGER.debug("Updating userdetails with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "regFormDBTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


